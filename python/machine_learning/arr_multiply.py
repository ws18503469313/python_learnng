import numpy as np

A = np.array([[1, 2], [3, 4]])

B = np.array([[5, 6], [7, 8]])

print(np.dot(A, B))
print("============================================")

C= np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16] ])
D= np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16] ])

print(np.dot(C, D))
print("============================================")

# ---------------------------------------------------------------------------------------

# 输出层所用的激活函数，要根据求解问题的性质决定。
# 一般地，回归问题可以使用恒等函数，
# 二元分类问题可以使用 sigmoid 函数
# ，多元分类问题可以使用 softmax 函数
# 激活函数
def sigmoid(x):
    return  1 / (1 + np.exp(-x))
#输出函数
def identity_function(x):
    return x

X = np.array([1.0, 0.5])
W1 = np.array([[0.1, 0.3, 0.5], [0.2, 0.4, 0.6]])
B1 = np.array([0.1, 0.2, 0.3])

A1 = np.dot(X, W1) + B1
print("第一层神经元计算结果"+ str(A1))

Z1 = sigmoid(A1)
print("第一层神经元激活结果"+str(Z1))

print("============================================")

W2 = np.array([[0.1, 0.4], [0.2, 0.5], [0.3, 0.6]])
B2 = np.array([0.1, 0.2])

A2 = np.dot(Z1, W2) + B2
print("第二层神经元计算结果"+ str(A2))

Z2 = sigmoid(A2)
print("第二层神经元激活结果"+ str(Z2))

print("============================================")

W3 = np.array([[0.1, 0.3], [0.2, 0.4]])
B3 = np.array([0.1, 0.2])

A3 = np.dot(Z2, W3) + B3
print("第三层计算结果:" + str(A3))

Y = identity_function(A3)

print("输出结果:" + str(Y))


